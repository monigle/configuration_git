<?php

// Git Command specific
define('CONFIGURATION_GIT_STATUS', 'git status ');
// Atomic Commits
define('CONFIGURATION_GIT_ADD', 'git add ');
// Not Atomic
//define('CONFIGURATION_GIT_ADD', 'git add -A ');
define('CONFIGURATION_GIT_COMMIT', 'git commit -m \'%s\''); // --author
define('CONFIGURATION_GIT_INIT', 'git init --shared=all ');
define('CONFIGURATION_GIT_REMOTE', 'git remote add origin ');
define('CONFIGURATION_GIT_PULL', 'git pull origin ');

// Git Environment Specific
define('CONFIGURATION_GIT_RESPOSITORY', '');
define('CONFIGURATION_GIT_EMAIL', 'you@yourdomain.example.com');
define('CONFIGURATION_GIT_NAME', 'Your Name Comes Here');

// Git Response / Error Specific
define('CONFIGURATION_GIT_STATUS_NOREPO', 'Not a git repository');
define('CONFIGURATION_GIT_CODE_NOREPO', 128);
define('CONFIGURATION_GIT_STATUS_REMOTEEXISTS', 'remote origin already exists');

// OS Specific / Testing
define('CONFIGURATION_GIT_STDOUT',' 2>&1');
define('CONFIGURATION_GIT_DIRECTORYSEPERATOR','/');
define('CONFIGURATION_GIT_WHOAMI', 'whoami ');

/**
 * Implements configuration_gitpost_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function configuration_git_help($path, $arg) {
  switch ($path) {
    case "admin/help#configuration_gitpost":
      return '<p>'.  t("This is the first help from my new module") .'</p>';
      break;
  }
}


/**
 * Implements configuration_git_after_configuration_write_exports
 *
 * @param filename 
 *	Complete path to the file that was written for configuration.
 */
function configuration_git_after_configuration_write_exports($filename) {
	
	$directory = variable_get('configuration_config_path', conf_path() . '/files/config');

	$filename = $directory . CONFIGURATION_GIT_DIRECTORYSEPERATOR . $filename;
	
	$status = configuration_git_add_file($filename);
	if ($status['return_var'])
		drupal_set_message(t('Falied to add %file to git repo, Error %error', array('%file' => $filename, '%error' => implode(' ',$status['output']))),'error');
	else
		drupal_set_message(t('Added %file to git repo', array('%file' => $filename)));
	$status = configuration_git_commit_file($filename);
	if ($status['return_var'])
		drupal_set_message(t('Falied to commit %file to git repo, Error %error', array('%file' => $filename, '%error' => implode(' ',$status['output']))),'error');
	else
		drupal_set_message(t('Committed %file to git repo', array('%file' => $filename)));
	
}

/**
 * Implements configuration_git_add_file
 *
 * @param filename 
 *	Complete path to the file that will be added to the repository.
 */
function configuration_git_add_file($filename) {
	
	$return_var = 0;
	$output = array();
	
	$command = CONFIGURATION_GIT_ADD . $filename;
	ob_start();
	exec($command . CONFIGURATION_GIT_STDOUT, $output, $return_var);
	$buffer = ob_get_clean();
	$result['return_var'] = $return_var;
	$result['output'] = $output;
	$result['buffer'] = $buffer;
	
	// passing results, dummy method
	return $result;
}

/**
 * Implements configuration_git_commit_file
 *
 * @param filename 
 *	Complete path to the file that will be commited to the repository.
 */
function configuration_git_commit_file($filename) {
	global $user;
	$return_var = 0;
	$output = array();
	
	if ($user->mail)
		$command = sprintf(CONFIGURATION_GIT_COMMIT,$user->mail) . $filename;
	else
		$command = sprintf(CONFIGURATION_GIT_COMMIT,variable_get('configuration_git_email', CONFIGURATION_GIT_EMAIL)) . $filename;
	ob_start();
	exec($command . CONFIGURATION_GIT_STDOUT, $output, $return_var);
	$buffer = ob_get_clean();
	$result['return_var'] = $return_var;
	$result['output'] = $output;
	$result['buffer'] = $buffer;
	
	// passing results, dummy method
	return $result;
}

/**
 * Implements configuration_git_status
 *
 * @param filename 
 *	Complete path to the file that will be added to the repository.
 */
function configuration_git_status() {
	$return_var = 0;
	$output = array();
	$result = array();
	
	$command = CONFIGURATION_GIT_STATUS;
	ob_start();
	@exec($command . CONFIGURATION_GIT_STDOUT, $output, $return_var);
	$buffer = ob_get_clean();
	$result['return_var'] = $return_var;
	$result['output'] = $output;
	$result['buffer'] = $buffer;
	
	if ($result['return_var']==CONFIGURATION_GIT_CODE_NOREPO)
	{
		$result = configuration_git_repo_init();
//		ob_start();
//		@exec($command . CONFIGURATION_GIT_STDOUT, $output, $return_var);
//		$buffer = ob_get_clean();
//		$result['return_var'] = $return_var;
//		$result['output'] = $output;
//		$result['buffer'] = $buffer;
	}
	return $result;
}

/**
 * Implements configuration_git_status
 *
 * @param filename 
 *	Complete path to the file that will be added to the repository.
 */
function configuration_git_repo_init() {
	
	$return_var = 0;
	$output = array();
	$result = array();
	
	$command = CONFIGURATION_GIT_INIT;
	ob_start();
	exec($command . CONFIGURATION_GIT_STDOUT, $output, $return_var);
	$buffer = ob_get_clean();
	$result['return_var'] = $return_var;
	$result['output'] = $output;
	$result['buffer'] = $buffer;
	
	// passing results, dummy method
	return $result;
}

/**
 * Implements configuration_git_status
 *
 * @param url 
 *	Complete path to the repository if other than Drupal variable
 */
function configuration_git_remote($url='') {
	
	$return_var = 0;
	$output = array();
	$result = array();
	
	if ($url)
		variable_set('configuration_git_repository', $url);
	else
		$url = variable_get('configuration_git_repository', CONFIGURATION_GIT_RESPOSITORY);
	
	$command = CONFIGURATION_GIT_REMOTE . $url;
	ob_start();
	exec($command . CONFIGURATION_GIT_STDOUT, $output, $return_var);
	$buffer = ob_get_clean();
	$result['return_var'] = $return_var;
	$result['output'] = $output;
	$result['buffer'] = $buffer;
	
	// passing results, dummy method
	return $result;
}

/**
 * Implements hook_menu().
 */
function configuration_git_menu() {
  $items = array();

  $items['admin/config/system/configuration_git'] = array(
    'title' => 'Configuration git',
    'description' => 'Configuration for Configuration git',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('configuration_git_admin_config_system_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Administrative form
 *
 * @see configuration_git_menu()
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function configuration_git_admin_config_system_form($form, &$form_state) {
  $form['configuration_git_repository'] = array(
    '#type' => 'textfield',
    '#title' => t('Platform git Respository'),
    '#default_value' => variable_get('configuration_git_repository', CONFIGURATION_GIT_RESPOSITORY),
    '#size' => 64,
    '#maxlength' => 254,
    '#description' => t('Enter the Git Repository Location Here (https://, Leave blank for local only.)'),
    '#required' => FALSE,
  );
  $form['configuration_git_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Platform git Name'),
    '#default_value' => variable_get('configuration_git_name', CONFIGURATION_GIT_NAME),
    '#size' => 64,
    '#maxlength' => 254,
    '#description' => t('Enter the Git Repository Default Name Address (.gitconfig)'),
    '#required' => TRUE,
  );
  $form['configuration_git_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Platform git Email'),
    '#default_value' => variable_get('configuration_git_email', CONFIGURATION_GIT_EMAIL),
    '#size' => 64,
    '#maxlength' => 254,
    '#description' => t('Enter the Git Repository Default Email Address (.gitconfig)'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function configuration_git_admin_config_system_form_validate($form, &$form_state){
  $configuration_git_repository = $form_state['values']['configuration_git_repository'];
  $configuration_git_name = $form_state['values']['configuration_git_name'];
  $configuration_git_email = $form_state['values']['configuration_git_email'];
  // TODO etc
  if (false){
    form_set_error('configuration_git_repository', t('message configuration_git_repository'));
  }
  if (false){
    form_set_error('configuration_git_name', t('message configuration_git_name'));
  }
  if (false){
    form_set_error('configuration_git_email', t('message configuration_git_email'));
  }
  
  $status = configuration_git_status();
  if ($status['return_var'])
  {
	form_set_error('configuration_git_repository', t(implode('\n',$status['output'])));
  }
  
  $status = configuration_git_remote();
  if ($status['return_var'])
	  if (!stripos(implode(' ',$status['output']), CONFIGURATION_GIT_STATUS_REMOTEEXISTS))
		form_set_error('configuration_git_repository', t($status['return_var'].':'.implode('\n',$status['output'])));
  
  
}

/**
 * Commit form
 *
 * @see configuration_git_menu()
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function configuration_git_commit_form($form, &$form_state) {
  // Form elements
  $form = array();
  
  // Text field
  $form['name'] = array(
    '#title' => t('Commit Message'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#type' => 'textarea',
    '#rows' => 3,
    '#cols' => 64,
    '#description' => t('Enter a meaningful message of what you did.'),
    '#required' => TRUE,
  );
  
  // Submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Commit',
  );
  
  return $form;
}
